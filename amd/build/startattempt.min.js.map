{"version":3,"sources":["../src/startattempt.js"],"names":["define","$","Ajax","Notification","setup","props","console","log","window","invigilator_share_state","document","getElementById","invigilator_window_surface","invigilator_screenoff","videoElem","logElem","displayMediaOptions","video","cursor","audio","click","event","preventDefault","startCapture","innerHTML","navigator","mediaDevices","getDisplayMedia","srcObject","css","errString","toString","alert","findHeight","width","currentAspectRatio","screen","height","windowState","setInterval","updateWindowStatus","videoTrack","getVideoTracks","currentStream","active","settings","getSettings","displaySurface","value","screenoff","stop","clearInterval","location","reload","screenShotInterval","takeScreenshot","close","video_screen","canvas_screen","screen_context","getContext","width_config","screenshotwidth","height_config","drawImage","screen_data","toDataURL","params","courseid","cmid","quizid","call","methodname","args","done","data","warnings","length","addNotification","message","type","fail","exception","screenshotdelay","init","prop","is","hideButtons","screensharestatus","screensharemode","showButtons"],"mappings":"kYAAAA,OAAM,uCAAC,CAAC,QAAD,CAAW,WAAX,CAAwB,mBAAxB,CAAD,CACF,SAASC,CAAT,CAAYC,CAAZ,CAAkBC,CAAlB,CAAgC,CAC5B,MAAO,CACHC,KAAK,CAAE,eAASC,CAAT,CAAe,CAClBC,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA0BF,CAA1B,EACAC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EACAC,MAAM,CAACC,uBAAP,CAAiCC,QAAQ,CAACC,cAAT,CAAwB,yBAAxB,CAAjC,CACAH,MAAM,CAACI,0BAAP,CAAoCF,QAAQ,CAACC,cAAT,CAAwB,4BAAxB,CAApC,CACAH,MAAM,CAACK,qBAAP,CAA+BH,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,CAA/B,CALkB,GAOZG,CAAAA,CAAS,CAAGJ,QAAQ,CAACC,cAAT,CAAwB,0BAAxB,CAPA,CAQZI,CAAO,CAAGL,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CARE,CAUdK,CAAmB,CAAG,CACtBC,KAAK,CAAE,CACHC,MAAM,CAAE,QADL,CADe,CAItBC,KAAK,GAJiB,CAVR,CAiBlBlB,CAAC,CAAC,+BAAD,CAAD,CAAmCmB,KAAnC,CAAyC,UAAW,CAChDC,KAAK,CAACC,cAAN,GACAhB,OAAO,CAACC,GAAR,CAAY,wBAAZ,EACAgB,CAAY,EACf,CAJD,EAjBkB,QAuBHA,CAAAA,CAvBG,2FAuBlB,oGACIR,CAAO,CAACS,SAAR,CAAoB,EAApB,CADJ,wBAIoCC,CAAAA,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuCX,CAAvC,CAJpC,QAIQF,CAAS,CAACc,SAJlB,QAKQ3B,CAAC,CAAC,iBAAD,CAAD,CAAqB4B,GAArB,CAAyB,SAAzB,CAAoC,OAApC,EACA5B,CAAC,CAAC,6BAAD,CAAD,CAAiC4B,GAAjC,CAAqC,SAArC,CAAgD,OAAhD,EANR,mDASYC,CATZ,CASwB,KAAIC,QAAJ,EATxB,MAUyB,oCAAb,EAAAD,CAVZ,mBAWYE,KAAK,CAAC,6BAAD,CAAL,CAXZ,mFAvBkB,kCA0IlB,QAASC,CAAAA,CAAT,CAAoBC,CAApB,CAA2B,IACnBC,CAAAA,CAAkB,CAAGC,MAAM,CAACF,KAAP,CAAaE,MAAM,CAACC,MADtB,CAGvB,MADgBH,CAAAA,CAAK,CAAGC,CAE3B,CA9IiB,GAgJdG,CAAAA,CAAW,CAAGC,WAAW,CAxGJ,QAArBC,CAAAA,kBAAqB,EAAW,CAChC,GAA4B,IAAxB,GAAA1B,CAAS,CAACc,SAAd,CAAkC,IAExBa,CAAAA,CAAU,CAAG3B,CAAS,CAACc,SAAV,CAAoBc,cAApB,GAAqC,CAArC,CAFW,CAG1BC,CAAa,CAAG7B,CAAS,CAACc,SAHA,CAI1BgB,CAAM,CAAGD,CAAa,CAACC,MAJG,CAK1BC,CAAQ,CAAGJ,CAAU,CAACK,WAAX,EALe,CAM1BC,CAAc,CAAGF,CAAQ,CAACE,cANA,CAO9BrC,QAAQ,CAACC,cAAT,CAAwB,4BAAxB,EAAsDqC,KAAtD,CAA8DD,CAA9D,CACArC,QAAQ,CAACC,cAAT,CAAwB,yBAAxB,EAAmDqC,KAAnD,CAA2DJ,CAA3D,CACA,GAAIK,CAAAA,CAAS,CAAGvC,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,EAAuDqC,KAAvE,CACA,GAAiB,GAAb,EAAAC,CAAJ,CAAsB,CAClBR,CAAU,CAACS,IAAX,GAEAC,aAAa,CAACb,CAAD,CAAb,CACAc,QAAQ,CAACC,MAAT,EACH,CACJ,CACJ,CAsF4B,CAAqB,GAArB,CAhJX,CAiJdC,CAAkB,CAAGf,WAAW,CArFf,QAAjBgB,CAAAA,cAAiB,EAAW,CAC5B,GAAIN,CAAAA,CAAS,CAAGvC,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,EAAuDqC,KAAvE,CACA,GAA4B,IAAxB,GAAAlC,CAAS,CAACc,SAAd,CAAkC,IAExBa,CAAAA,CAAU,CAAG3B,CAAS,CAACc,SAAV,CAAoBc,cAApB,GAAqC,CAArC,CAFW,CAG1BC,CAAa,CAAG7B,CAAS,CAACc,SAHA,CAI1BgB,CAAM,CAAGD,CAAa,CAACC,MAJG,CAO1BC,CAAQ,CAAGJ,CAAU,CAACK,WAAX,EAPe,CAQ1BC,CAAc,CAAGF,CAAQ,CAACE,cARA,CAU9B,GAAiB,GAAb,EAAAE,CAAJ,CAAsB,CAClB,GAAI,CAACL,CAAL,CAAa,CACTZ,KAAK,CAAC,+EAAD,CAAL,CACAmB,aAAa,CAACG,CAAD,CAAb,CACA9C,MAAM,CAACgD,KAAP,GACA,QACH,CAED,GAAuB,SAAnB,GAAAT,CAAJ,CAAkC,CAC9Bf,KAAK,CAAC,2CAAD,CAAL,CACAmB,aAAa,CAACG,CAAD,CAAb,CACA9C,MAAM,CAACgD,KAAP,GACA,QACH,CAEJ,CAzB6B,GA8B1BC,CAAAA,CAAY,CAAG/C,QAAQ,CAACC,cAAT,CAAwB,0BAAxB,CA9BW,CA+B1B+C,CAAa,CAAGhD,QAAQ,CAACC,cAAT,CAAwB,2BAAxB,CA/BU,CAgC1BgD,CAAc,CAAGD,CAAa,CAACE,UAAd,CAAyB,IAAzB,CAhCS,CAkC1BC,CAAY,CAAGxD,CAAK,CAACyD,eAlCK,CAmC1BC,CAAa,CAAG9B,CAAU,CAAC5B,CAAK,CAACyD,eAAP,CAnCA,CAoC9BJ,CAAa,CAACxB,KAAd,CAAsB2B,CAAtB,CACAH,CAAa,CAACrB,MAAd,CAAuB0B,CAAvB,CACAJ,CAAc,CAACK,SAAf,CAAyBP,CAAzB,CAAuC,CAAvC,CAA0C,CAA1C,CAA6CI,CAA7C,CAA2DE,CAA3D,EAtC8B,GAuC1BE,CAAAA,CAAW,CAAGP,CAAa,CAACQ,SAAd,CAAwB,WAAxB,CAvCY,CA6C1BC,CAAM,CAAG,CACT,SAAY9D,CAAK,CAAC+D,QADT,CAET,KAAQ/D,CAAK,CAACgE,IAFL,CAGT,OAAUhE,CAAK,CAACiE,MAHP,CAIT,WAAcL,CAJL,CA7CiB,CA0D9B,GAAiB,GAAb,EAAAhB,CAAJ,CAAsB,CAClB/C,CAAI,CAACqE,IAAL,CAAU,CAPA,CACVC,UAAU,CATG,wCAQH,CAEVC,IAAI,CAAEN,CAFI,CAOA,CAAV,EAAqB,CAArB,EAAwBO,IAAxB,CAA6B,SAASC,CAAT,CAAe,CACxC,KAA2B,CAAvB,CAAAA,CAAI,CAACC,QAAL,CAAcC,MAAlB,EAEO,CACH,GAAIpB,CAAJ,CAAkB,CACdtD,CAAY,CAAC2E,eAAb,CAA6B,CACzBC,OAAO,CAAE,+CADgB,CAEzBC,IAAI,CAAE,OAFmB,CAA7B,EAIA7B,aAAa,CAACG,CAAD,CAChB,CACJ,CACJ,CAZD,EAYG2B,IAZH,CAYQ9E,CAAY,CAAC+E,SAZrB,CAaH,CACJ,CACJ,CASmC,CAAuC,GAAtB,CAAA7E,CAAK,CAAC8E,eAAvB,CACvC,CAnJE,CAoJHC,IAAI,CAAE,eAAgB,CAClB9E,OAAO,CAACC,GAAR,CAAY,0BAAZ,EACAN,CAAC,CAAC,kBAAD,CAAD,CAAsBoF,IAAtB,CAA2B,UAA3B,KACApF,CAAC,CAAC,iBAAD,CAAD,CAAqB4B,GAArB,CAAyB,SAAzB,CAAoC,MAApC,EACA5B,CAAC,CAAC,6BAAD,CAAD,CAAiC4B,GAAjC,CAAqC,SAArC,CAAgD,MAAhD,EAGA5B,CAAC,CAAC,iBAAD,CAAD,CAAqBmB,KAArB,CAA2B,UAAW,CAClC,GAAI,CAACnB,CAAC,CAAC,IAAD,CAAD,CAAQqF,EAAR,CAAW,UAAX,CAAL,CAA6B,CACzBhF,OAAO,CAACC,GAAR,CAAY,YAAZ,EACAgF,CAAW,EACd,CAHD,IAII,CACAjF,OAAO,CAACC,GAAR,CAAY,SAAZ,EADA,GAEIiF,CAAAA,CAAiB,CAAG9E,QAAQ,CAACC,cAAT,CAAwB,yBAAxB,EAAmDqC,KAF3E,CAGIyC,CAAe,CAAG/E,QAAQ,CAACC,cAAT,CAAwB,4BAAxB,EAAsDqC,KAH5E,CAIA1C,OAAO,CAACC,GAAR,CAAYkF,CAAZ,EACAnF,OAAO,CAACC,GAAR,CAAYiF,CAAZ,EACA,GAAuB,SAAnB,EAAAC,CAAD,EAAwD,MAArB,EAAAD,CAAtC,CAAmE,CAC/DE,CAAW,EACd,CAFD,IAGI,CACA1D,KAAK,CAAC,sDAAD,CACR,CACJ,CACJ,CAlBD,EAuBA,QAASuD,CAAAA,CAAT,EAAuB,CACnBtF,CAAC,CAAC,kBAAD,CAAD,CAAsBoF,IAAtB,CAA2B,UAA3B,IACH,CAKD,QAASK,CAAAA,CAAT,EAAuB,CACnBzF,CAAC,CAAC,kBAAD,CAAD,CAAsBoF,IAAtB,CAA2B,UAA3B,IACH,CACD,QACH,CA7LE,CA+LV,CAjMC,CAAN","sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'],\n    function($, Ajax, Notification) {\n        return {\n            setup: function(props){\n                console.log(\"props found\",props);\n                console.log('startattempt/setup called');\n                window.invigilator_share_state = document.getElementById('invigilator_share_state');\n                window.invigilator_window_surface = document.getElementById('invigilator_window_surface');\n                window.invigilator_screenoff = document.getElementById('invigilator_screen_off_flag');\n\n                const videoElem = document.getElementById(\"invigilator-video-screen\");\n                const logElem = document.getElementById(\"invigilator-log-screen\");\n\n                var displayMediaOptions = {\n                    video: {\n                        cursor: \"always\"\n                    },\n                    audio: false\n                };\n\n                $(\"#invigilator-share-screen-btn\").click(function() {\n                    event.preventDefault();\n                    console.log('screen sharing clicked');\n                    startCapture();\n                });\n\n                async function startCapture() {\n                    logElem.innerHTML = \"\";\n                    try {\n                        // Console.log(\"vid found success\");\n                        videoElem.srcObject = await navigator.mediaDevices.getDisplayMedia(displayMediaOptions);\n                        $('#id_invigilator').css(\"display\", 'block');\n                        $(\"label[for='id_invigilator']\").css(\"display\", 'block');\n                    } catch (err) {\n                        // Console.log(\"Error: \" + err.toString());\n                        let errString = err.toString();\n                        if (errString == \"NotAllowedError: Permission denied\") {\n                            alert(\"Please share entire screen.\");\n                            return false;\n                        }\n                    }\n                }\n\n                var updateWindowStatus = function() {\n                    if (videoElem.srcObject !== null) {\n                        // Console.log(videoElem);\n                        const videoTrack = videoElem.srcObject.getVideoTracks()[0];\n                        var currentStream = videoElem.srcObject;\n                        var active = currentStream.active;\n                        var settings = videoTrack.getSettings();\n                        var displaySurface = settings.displaySurface;\n                        document.getElementById('invigilator_window_surface').value = displaySurface;\n                        document.getElementById('invigilator_share_state').value = active;\n                        var screenoff = document.getElementById('invigilator_screen_off_flag').value;\n                        if (screenoff == \"1\") {\n                            videoTrack.stop();\n                            // Console.log('video stopped');\n                            clearInterval(windowState);\n                            location.reload();\n                        }\n                    }\n                };\n\n                var takeScreenshot = function() {\n                    var screenoff = document.getElementById('invigilator_screen_off_flag').value;\n                    if (videoElem.srcObject !== null) {\n                        // Console.log(videoElem);\n                        const videoTrack = videoElem.srcObject.getVideoTracks()[0];\n                        var currentStream = videoElem.srcObject;\n                        var active = currentStream.active;\n                        // Console.log(active);\n\n                        var settings = videoTrack.getSettings();\n                        var displaySurface = settings.displaySurface;\n\n                        if (screenoff == \"0\") {\n                            if (!active) {\n                                alert(\"Sorry !! You need to restart the attempt as you have stopped the screenshare.\");\n                                clearInterval(screenShotInterval);\n                                window.close();\n                                return false;\n                            }\n\n                            if (displaySurface !== \"monitor\") {\n                                alert(\"Sorry !! You need to share entire screen.\");\n                                clearInterval(screenShotInterval);\n                                window.close();\n                                return false;\n                            }\n\n                        }\n                        // Console.log(displaySurface);\n                        // console.log(quizurl);\n\n                        // Capture Screen\n                        var video_screen = document.getElementById('invigilator-video-screen');\n                        var canvas_screen = document.getElementById('invigilator-canvas-screen');\n                        var screen_context = canvas_screen.getContext('2d');\n                        // Var photo_screen = document.getElementById('photo_screen');\n                        var width_config = props.screenshotwidth;\n                        var height_config = findHeight(props.screenshotwidth);\n                        canvas_screen.width = width_config;\n                        canvas_screen.height = height_config;\n                        screen_context.drawImage(video_screen, 0, 0, width_config, height_config);\n                        var screen_data = canvas_screen.toDataURL('image/png');\n                        // Photo_screen.setAttribute('src', screen_data);\n                        // console.log(screen_data);\n\n                        // API Call\n                        var wsfunction = 'quizaccess_invigilator_send_screenshot';\n                        var params = {\n                            'courseid': props.courseid,\n                            'cmid': props.cmid,\n                            'quizid': props.quizid,\n                            'screenshot': screen_data\n                        };\n\n                        var request = {\n                            methodname: wsfunction,\n                            args: params\n                        };\n\n                        // Console.log('params', params);\n                        if (screenoff == \"0\") {\n                            Ajax.call([request])[0].done(function(data) {\n                                if (data.warnings.length < 1) {\n                                    // NO; pictureCounter++;\n                                } else {\n                                    if (video_screen) {\n                                        Notification.addNotification({\n                                            message: 'Something went wrong during taking the image.',\n                                            type: 'error'\n                                        });\n                                        clearInterval(screenShotInterval);\n                                    }\n                                }\n                            }).fail(Notification.exception);\n                        }\n                    }\n                };\n\n                function findHeight(width) {\n                    var currentAspectRatio = screen.width/screen.height;\n                    var newHeight = width / currentAspectRatio;\n                    return newHeight;\n                }\n\n                var windowState = setInterval(updateWindowStatus, 1000);\n                var screenShotInterval = setInterval(takeScreenshot, props.screenshotdelay*1000);\n            },\n            init: function(props) {\n                console.log('startattempt/init called');\n                $('#id_submitbutton').prop(\"disabled\", true);\n                $('#id_invigilator').css(\"display\", 'none');\n                $(\"label[for='id_invigilator']\").css(\"display\", 'none');\n\n\n                $('#id_invigilator').click(function() {\n                    if (!$(this).is(':checked')) {\n                        console.log(\"un Checked\");\n                        hideButtons();\n                    }\n                    else{\n                        console.log(\"Checked\");\n                        var screensharestatus = document.getElementById('invigilator_share_state').value;\n                        var screensharemode = document.getElementById('invigilator_window_surface').value;\n                        console.log(screensharemode);\n                        console.log(screensharestatus);\n                        if((screensharemode == 'monitor') && (screensharestatus == \"true\")){\n                            showButtons();\n                        }\n                        else{\n                            alert('Please click share screen and choose entire monitor.');\n                        }\n                    }\n                });\n\n                /**\n                 * HideButtons\n                 */\n                function hideButtons() {\n                    $('#id_submitbutton').prop(\"disabled\", true);\n                }\n\n                /**\n                 * ShowButtons\n                 */\n                function showButtons() {\n                    $('#id_submitbutton').prop(\"disabled\", false);\n                }\n                return true;\n            }\n        };\n    });\n"],"file":"startattempt.min.js"}