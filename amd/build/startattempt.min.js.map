{"version":3,"sources":["../src/startattempt.js"],"names":["define","$","Ajax","Notification","setup","props","window","invigilatorShareState","document","getElementById","invigilatorWindowSurface","invigilatorScreenoff","videoElem","logElem","screensharemsg","restartattemptcommand","somethingwentwrong","displayMediaOptions","video","cursor","audio","click","event","preventDefault","startCapture","innerHTML","navigator","mediaDevices","getDisplayMedia","srcObject","css","errString","toString","addNotification","message","type","findHeight","width","currentAspectRatio","screen","height","windowState","setInterval","updateWindowStatus","videoTrack","getVideoTracks","currentStream","active","settings","getSettings","displaySurface","value","screenoff","stop","clearInterval","location","reload","screenShotInterval","takeScreenshot","close","videoScreen","canvasScreen","screenContext","getContext","widthConfig","screenshotwidth","heightConfig","drawImage","screenData","toDataURL","params","courseid","cmid","quizid","call","methodname","args","done","data","warnings","length","fail","exception","screenshotdelay","init","prop","is","hideButtons","screensharestatus","screensharemode","showButtons"],"mappings":"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","sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'],\n    function($, Ajax, Notification) {\n        return {\n            setup: function(props) {\n                window.invigilatorShareState = document.getElementById('invigilator_share_state');\n                window.invigilatorWindowSurface = document.getElementById('invigilator_window_surface');\n                window.invigilatorScreenoff = document.getElementById('invigilator_screen_off_flag');\n\n                const videoElem = document.getElementById(\"invigilator-video-screen\");\n                const logElem = document.getElementById(\"invigilator-log-screen\");\n                const screensharemsg = props.screensharemsg;\n                const restartattemptcommand = props.restartattemptcommand;\n                const somethingwentwrong = props.somethingwentwrong;\n\n                var displayMediaOptions = {\n                    video: {\n                        cursor: \"always\"\n                    },\n                    audio: false\n                };\n\n                $(\"#invigilator-share-screen-btn\").click(function() {\n                    event.preventDefault();\n                    startCapture();\n                });\n\n                /**\n                 * Start screen capture.\n                 */\n                async function startCapture() {\n                    logElem.innerHTML = \"\";\n                    try {\n                        // Console.log(\"vid found success\");\n                        videoElem.srcObject = await navigator.mediaDevices.getDisplayMedia(displayMediaOptions);\n                        $('#id_invigilator').css(\"display\", 'block');\n                        $(\"label[for='id_invigilator']\").css(\"display\", 'block');\n                    } catch (err) {\n                        // Console.log(\"Error: \" + err.toString());\n                        let errString = err.toString();\n                        if (errString == \"NotAllowedError: Permission denied\") {\n                            Notification.addNotification({\n                                message: screensharemsg,\n                                type: 'error'\n                            });\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n\n                var updateWindowStatus = function() {\n                    if (videoElem.srcObject !== null) {\n                        // Console.log(videoElem);\n                        const videoTrack = videoElem.srcObject.getVideoTracks()[0];\n                        var currentStream = videoElem.srcObject;\n                        var active = currentStream.active;\n                        var settings = videoTrack.getSettings();\n                        var displaySurface = settings.displaySurface;\n                        document.getElementById('invigilator_window_surface').value = displaySurface;\n                        document.getElementById('invigilator_share_state').value = active;\n                        var screenoff = document.getElementById('invigilator_screen_off_flag').value;\n                        if (screenoff == \"1\") {\n                            videoTrack.stop();\n                            // Console.log('video stopped');\n                            clearInterval(windowState);\n                            location.reload();\n                        }\n                    }\n                };\n\n                var takeScreenshot = function() {\n                    var screenoff = document.getElementById('invigilator_screen_off_flag').value;\n                    if (videoElem.srcObject !== null) {\n                        const videoTrack = videoElem.srcObject.getVideoTracks()[0];\n                        var currentStream = videoElem.srcObject;\n                        var active = currentStream.active;\n\n                        var settings = videoTrack.getSettings();\n                        var displaySurface = settings.displaySurface;\n\n                        if (screenoff == \"0\") {\n                            if (!active) {\n                                Notification.addNotification({\n                                    message: restartattemptcommand,\n                                    type: 'error'\n                                });\n                                clearInterval(screenShotInterval);\n                                window.close();\n                                return false;\n                            }\n\n                            if (displaySurface !== \"monitor\") {\n                                Notification.addNotification({\n                                    message: screensharemsg,\n                                    type: 'error'\n                                });\n                                clearInterval(screenShotInterval);\n                                window.close();\n                                return false;\n                            }\n\n                        }\n                        // Console.log(displaySurface);\n                        // console.log(quizurl);\n\n                        // Capture Screen\n                        var videoScreen = document.getElementById('invigilator-video-screen');\n                        var canvasScreen = document.getElementById('invigilator-canvas-screen');\n                        var screenContext = canvasScreen.getContext('2d');\n                        // Var photo_screen = document.getElementById('photo_screen');\n                        var widthConfig = props.screenshotwidth;\n                        var heightConfig = findHeight(props.screenshotwidth);\n                        canvasScreen.width = widthConfig;\n                        canvasScreen.height = heightConfig;\n                        screenContext.drawImage(videoScreen, 0, 0, widthConfig, heightConfig);\n                        var screenData = canvasScreen.toDataURL('image/png');\n                        // Photo_screen.setAttribute('src', screenData);\n                        // console.log(screenData);\n\n                        // API Call\n                        var wsfunction = 'quizaccess_invigilator_send_screenshot';\n                        var params = {\n                            'courseid': props.courseid,\n                            'cmid': props.cmid,\n                            'quizid': props.quizid,\n                            'screenshot': screenData\n                        };\n\n                        var request = {\n                            methodname: wsfunction,\n                            args: params\n                        };\n\n                        // Console.log('params', params);\n                        if (screenoff == \"0\") {\n                            Ajax.call([request])[0].done(function(data) {\n                                if (data.warnings.length < 1) {\n                                    // NO; pictureCounter++;\n                                } else {\n                                    if (videoScreen) {\n                                        Notification.addNotification({\n                                            message: somethingwentwrong,\n                                            type: 'error'\n                                        });\n                                        clearInterval(screenShotInterval);\n                                    }\n                                }\n                            }).fail(Notification.exception);\n                        }\n                    }\n                    return true;\n                };\n\n                /**\n                 * Calculate height from width and screen aspect ratio.\n                 * @param {number} width\n                 * @returns {number}\n                 */\n                function findHeight(width) {\n                    var currentAspectRatio = screen.width / screen.height;\n                    var newHeight = width / currentAspectRatio;\n                    return newHeight;\n                }\n\n                var windowState = setInterval(updateWindowStatus, 1000);\n                var screenShotInterval = setInterval(takeScreenshot, props.screenshotdelay * 1000);\n            },\n            init: function(props) {\n                $('#id_submitbutton').prop(\"disabled\", true);\n                $('#id_invigilator').css(\"display\", 'none');\n                $(\"label[for='id_invigilator']\").css(\"display\", 'none');\n\n                const screensharemsg = props.screensharemsg;\n                $('#id_invigilator').click(function() {\n                    if (!$(this).is(':checked')) {\n                        hideButtons();\n                    } else {\n                        var screensharestatus = document.getElementById('invigilator_share_state').value;\n                        var screensharemode = document.getElementById('invigilator_window_surface').value;\n                        if ((screensharemode == 'monitor') && (screensharestatus == \"true\")) {\n                            showButtons();\n                        } else {\n                            Notification.addNotification({\n                                message: screensharemsg,\n                                type: 'error'\n                            });\n                        }\n                    }\n                });\n\n                /**\n                 * HideButtons\n                 */\n                function hideButtons() {\n                    $('#id_submitbutton').prop(\"disabled\", true);\n                }\n\n                /**\n                 * ShowButtons\n                 */\n                function showButtons() {\n                    $('#id_submitbutton').prop(\"disabled\", false);\n                }\n                return true;\n            }\n        };\n    });\n"],"file":"startattempt.min.js"}